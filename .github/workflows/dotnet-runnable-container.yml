name: Container Runnable

on:
  workflow_call:
    inputs:
      # Build
      build:
        required: false
        type: boolean
        default: true
        description: Build a solution
      # .NET Version to use
      dotnet-version:
        required: false
        type: string
        default: |
          9.0.x
        description: .NET Version to use (can use multiple)
      # Project
      project:
        required: true
        type: string
        description: Path to a project (.csproj) or a solution (.sln, .slnx)
      # Test
      test:
        required: false
        type: boolean
        default: true
        description: Test a solution
      # Container Name
      container-name:
        required: true
        type: string
        description: Container Name
      # Container Build Context
      container-context:
        required: false
        type: string
        default: .
        description: Container Context
      # Container Build Image
      container-image:
        required: true
        type: string
        description: Container Build Image
      # Container File
      container-file:
        required: true
        type: string
        description: Container File (Dockerfile)
      # Container Secrets
      container-secrets:
        required: false
        type: string
        description: Container Secrets
      # Container Secret Envs
      container-secret-envs:
        required: false
        type: string
        description: Container Secret Environment Variables
      # Push
      container-push:
        required: false
        type: boolean
        default: true
        description: Push an image
      
jobs:
  # Build
  build:
    if: inputs.build
    name: Build
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Docker Build X
      - name: Set up Docker Build X
        uses: docker/setup-buildx-action@v3
        with:
          install: true
            
      # Login to GitHub Container Registry
      - name: "Login Registry: ${{ env.REGISTRY }}"
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # .NET Setup
      - name: .NET Setup
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      # .NET Restore
      - name: .NET Restore
        run: dotnet restore ${{ inputs.project }}

      # .NET Build
      - name: .NET Build
        run: dotnet build ${{ inputs.project }} --no-restore --configuration Release

      # .NET Test
      - name: .NET Test
        if: inputs.test
        run: |
          dotnet test \
            --nologo \
            --collect "XPlat Code Coverage" \
            --test-adapter-path . \
            --logger "junit;LogFileName={assembly}-{framework}-result.xml;MethodFormat=Class;FailureBodyFormat=Verbose" \
            --results-directory test-results

      # .NET Test Upload Test Results from Testing
      - name: .NET Test Upload
        if: inputs.test
        uses: actions/upload-artifact@v4
        with:
          name: test
          path: |
            test-results/
            !test-results/**/coverage.cobertura.xml

      # .NET Coverage Upload Results from Testing
      - name: .NET Coverage Upload
        if: inputs.test
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            test-results/**/coverage.cobertura.xml
            
      # Extract Image Metadata
      - name: "Extract Image Metadata: ${{ inputs.container-name }}"
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.container-image }}

      # Build and Push Container Image
      - name: "Build and Push Image: ${{ inputs.container-name }}"
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.container-context }}
          file: ${{ inputs.container-file }}
          push: ${{ inputs.container-push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: ${{ matrix.arguments }}
          secrets: ${{ inputs.container-secrets }}
          secret-envs: ${{ inputs.container-secret-envs }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
  # .NET Test Reporting
  test-report:
    # .NET Test Report
    name: .NET Test Report
    runs-on: ubuntu-latest
    if: inputs.test
    needs: build
    steps:
      # .NET Test Download Artifact
      - name: .NET Test Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: test

      # .NET Test Generate Test Result Report(s)
      - name: .NET Test Generate Test Result Report(s)
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          comment_mode: ""
          files: |
            **/*.xml

  # .NET Coverage Reporting
  coverage-report:
    # .NET Coverage Report
    name: .NET Coverage Report
    runs-on: ubuntu-latest
    if: inputs.test
    needs: build
    steps:
      # .NET Coverage Download Artifact
      - name: .NET Coverage Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage

      # .NET Coverage Summary Report
      - name: .NET Coverage Summary Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: "**/coverage.cobertura.xml"
          badge: true
          format: "markdown"
          output: "both"

      # .NET Coverage PR Comment Report
      - name: .NET Coverage PR Comment Report
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          hide_and_recreate: true
          path: code-coverage-results.md

      # .NET Coverage GitHubActions Job Summary Report
      - name: .NET Coverage GitHubActions Job Summary Report
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY
